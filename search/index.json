[{"content":"因为这段时间在准备学校学院里的 acm 竞赛，目前还算熟练掌握的语言就是 c/c++，所以以此开启我对我的学习历程的记录。\n笔记连载内容概述 对hello-算法和oi-wiki两个算法教学网站，以及菜鸟教程上的算法知识的学习与笔记分享。\n基础算法 我会从最基础的算法开始，参考网上大多数的算法教程，按合适的学习顺序，记录我的算法学习笔记。\n连载目标 这个连载的目标是帮助自己建立起扎实的 C/C++ 算法基础。\n在每一篇文章中，我会尽量用自己的语言和理解记录算法知识，同时提供详细的代码示例和解释。\n让我们一起开始吧 从下一篇文章开始，我将正式踏上 C/C++ 算法知识的学习之旅。希望你能和我一起，在这个充满挑战和乐趣的过程中不断探索和成长。\n","date":"2025-04-15T00:00:00Z","image":"https://tu-molo.github.io/p/c/c-%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/suanfa_hu_8206e3cc6d3ba773.jpg","permalink":"https://tu-molo.github.io/p/c/c-%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/","title":"C/C++算法笔记"},{"content":"This article offers a sample of basic Markdown syntax that can be used in Hugo content files, also it shows whether basic HTML elements are decorated with CSS in a Hugo theme.\nHeadings The following HTML \u0026lt;h1\u0026gt;—\u0026lt;h6\u0026gt; elements represent six levels of section headings. \u0026lt;h1\u0026gt; is the highest section level while \u0026lt;h6\u0026gt; is the lowest.\nH1 H2 H3 H4 H5 H6 Paragraph Xerum, quo qui aut unt expliquam qui dolut labo. Aque venitatiusda cum, voluptionse latur sitiae dolessi aut parist aut dollo enim qui voluptate ma dolestendit peritin re plis aut quas inctum laceat est volestemque commosa as cus endigna tectur, offic to cor sequas etum rerum idem sintibus eiur? Quianimin porecus evelectur, cum que nis nust voloribus ratem aut omnimi, sitatur? Quiatem. Nam, omnis sum am facea corem alique molestrunt et eos evelece arcillit ut aut eos eos nus, sin conecerem erum fuga. Ri oditatquam, ad quibus unda veliamenimin cusam et facea ipsamus es exerum sitate dolores editium rerore eost, temped molorro ratiae volorro te reribus dolorer sperchicium faceata tiustia prat.\nItatur? Quiatae cullecum rem ent aut odis in re eossequodi nonsequ idebis ne sapicia is sinveli squiatum, core et que aut hariosam ex eat.\nBlockquotes The blockquote element represents content that is quoted from another source, optionally with a citation which must be within a footer or cite element, and optionally with in-line changes such as annotations and abbreviations.\nBlockquote without attribution Tiam, ad mint andaepu dandae nostion secatur sequo quae. Note that you can use Markdown syntax within a blockquote.\nBlockquote with attribution Don\u0026rsquo;t communicate by sharing memory, share memory by communicating.\n— Rob Pike1\nTables Tables aren\u0026rsquo;t part of the core Markdown spec, but Hugo supports supports them out-of-the-box.\nName Age Bob 27 Alice 23 Inline Markdown within tables Italics Bold Code italics bold code A B C D E F Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus ultricies, sapien non euismod aliquam, dui ligula tincidunt odio, at accumsan nulla sapien eget ex. Proin eleifend dictum ipsum, non euismod ipsum pulvinar et. Vivamus sollicitudin, quam in pulvinar aliquam, metus elit pretium purus Proin sit amet velit nec enim imperdiet vehicula. Ut bibendum vestibulum quam, eu egestas turpis gravida nec Sed scelerisque nec turpis vel viverra. Vivamus vitae pretium sapien Code Blocks Code block with backticks 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; 测试 note测试\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class GradeManagementSystem: 更新学生课程成绩 :param student_id: 学生学号 :param course: 课程名称 :param new_score: 新的课程成绩 \u0026#34;\u0026#34;\u0026#34; student = self.get_student(student_id) if student: student.update_score(course, new_score) else: print(f\u0026#34;学号为 {student_id} 的学生不存在，无法更新成绩。\u0026#34;) def get_student_score(self, student_id, course): \u0026#34;\u0026#34;\u0026#34; 获取学生课程成绩 :param student_id: 学生学号 :param course: 课程名称 :return: 课程成绩，如果学生不存在或未录入该课程成绩则返回 None \u0026#34;\u0026#34;\u0026#34; student = self.get_student(student_id) if student: return student.get_score(course) else: print(f\u0026#34;学号为 {student_id} 的学生不存在，无法获取成绩。\u0026#34;) return None def get_student_all_scores(self, student_id): \u0026#34;\u0026#34;\u0026#34; 获取学生所有课程成绩 :param student_id: 学生学号 :return: 包含所有课程和成绩的字典，如果学生不存在则返回 None \u0026#34;\u0026#34;\u0026#34; student = self.get_student(student_id) if student: return student.get_all_scores() else: print(f\u0026#34;学号为 {student_id} 的学生不存在，无法获取所有成绩。\u0026#34;) return None Code block indented with four spaces \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with Hugo\u0026rsquo;s internal highlight shortcode 1 2 3 4 5 6 7 8 9 10 \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Diff code block 1 2 3 4 5 [dependencies.bevy] git = \u0026#34;https://github.com/bevyengine/bevy\u0026#34; rev = \u0026#34;11f52b8c72fc3a568e8bb4a4cd1f3eb025ac2e13\u0026#34; - features = [\u0026#34;dynamic\u0026#34;] + features = [\u0026#34;jpeg\u0026#34;, \u0026#34;dynamic\u0026#34;] List Types Ordered List First item Second item Third item Unordered List List item Another item And another item Nested list Fruit Apple Orange Banana Dairy Milk Cheese Other Elements — abbr, sub, sup, kbd, mark GIF is a bitmap image format.\nH2O\nXn + Yn = Zn\nPress CTRL + ALT + Delete to end the session.\nMost salamanders are nocturnal, and hunt for insects, worms, and other small creatures.\nHyperlinked image The above quote is excerpted from Rob Pike\u0026rsquo;s talk during Gopherfest, November 18, 2015.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","date":"2019-03-11T00:00:00Z","image":"https://tu-molo.github.io/p/markdown-syntax-guide/pawel-czerwinski-8uZPynIu-rQ-unsplash_hu_e95a4276bf860a84.jpg","permalink":"https://tu-molo.github.io/p/markdown-syntax-guide/","title":"Markdown Syntax Guide"},{"content":"《用 Python 实现简单的学生成绩管理系统》 以下是一个包含较长代码块的文本示例，以实现一个简单的学生成绩管理系统为例，使用 Python 语言，涵盖了类的定义、数据的增删改查等操作：\n学生成绩管理系统实现 在教育领域，学生成绩管理系统是一个非常重要的工具，它可以帮助教师和管理人员高效地管理学生的成绩信息。下面我们通过 Python 代码来实现一个简单的学生成绩管理系统，该系统能够进行学生信息的录入、成绩的添加与修改、学生信息和成绩的查询等操作。\n定义学生类 首先，我们定义一个 Student 类来表示学生对象，每个学生对象包含学生的姓名、学号和成绩信息。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 class Student: \u0026amp;#x20; def \\_\\_init\\_\\_(self, student\\_id, name): \u0026amp;#x20; self.student\\_id = student\\_id \u0026amp;#x20; self.name = name \u0026amp;#x20; self.scores = {} # 用于存储课程名称和对应成绩的字典 \u0026amp;#x20; def add\\_score(self, course, score): \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; 添加课程成绩 \u0026amp;#x20; :param course: 课程名称 \u0026amp;#x20; :param score: 课程成绩 \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; if 0 \u0026lt;= score \u0026lt;= 100: \u0026amp;#x20; self.scores\\[course] = score \u0026amp;#x20; else: \u0026amp;#x20; print(f\u0026#34;成绩输入错误，成绩应在 0 到 100 之间，{self.name} 的 {course} 成绩输入无效。\u0026#34;) \u0026amp;#x20; def update\\_score(self, course, new\\_score): \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; 更新课程成绩 \u0026amp;#x20; :param course: 课程名称 \u0026amp;#x20; :param new\\_score: 新的课程成绩 \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; if course in self.scores: \u0026amp;#x20; if 0 \u0026lt;= new\\_score \u0026lt;= 100: \u0026amp;#x20; self.scores\\[course] = new\\_score \u0026amp;#x20; else: \u0026amp;#x20; print(f\u0026#34;成绩输入错误，成绩应在 0 到 100 之间，{self.name} 的 {course} 新成绩输入无效。\u0026#34;) \u0026amp;#x20; else: \u0026amp;#x20; print(f\u0026#34;{self.name} 尚未录入 {course} 成绩，无法更新。\u0026#34;) \u0026amp;#x20; def get\\_score(self, course): \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; 获取课程成绩 \u0026amp;#x20; :param course: 课程名称 \u0026amp;#x20; :return: 课程成绩，如果未录入则返回 None \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; return self.scores.get(course) \u0026amp;#x20; def get\\_all\\_scores(self): \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; 获取所有课程成绩 \u0026amp;#x20; :return: 包含所有课程和成绩的字典 \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; return self.scores \u0026amp;#x20; def \\_\\_str\\_\\_(self): \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; 返回学生信息的字符串表示 \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; score\\_str = \u0026#34;, \u0026#34;.join(\\[f\u0026#34;{course}: {score}\u0026#34; for course, score in self.scores.items()]) \u0026amp;#x20; return f\u0026#34;学号: {self.student\\_id}, 姓名: {self.name}, 成绩: {score\\_str}\u0026#34; 定义成绩管理系统类 接着，我们定义一个 GradeManagementSystem 类来管理多个学生对象，实现学生的添加、删除、查询以及成绩的管理等功能。\nclass GradeManagementSystem: \u0026amp;#x20; def \\_\\_init\\_\\_(self): \u0026amp;#x20; self.students = {} # 用于存储学生对象的字典，以学号为键 \u0026amp;#x20; def add\\_student(self, student\\_id, name): \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; 添加学生 \u0026amp;#x20; :param student\\_id: 学生学号 \u0026amp;#x20; :param name: 学生姓名 \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; if student\\_id not in self.students: \u0026amp;#x20; self.students\\[student\\_id] = Student(student\\_id, name) \u0026amp;#x20; print(f\u0026#34;成功添加学生 {name}，学号为 {student\\_id}。\u0026#34;) \u0026amp;#x20; else: \u0026amp;#x20; print(f\u0026#34;学号为 {student\\_id} 的学生已存在，无法重复添加。\u0026#34;) \u0026amp;#x20; def remove\\_student(self, student\\_id): \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; 删除学生 \u0026amp;#x20; :param student\\_id: 学生学号 \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; if student\\_id in self.students: \u0026amp;#x20; del self.students\\[student\\_id] \u0026amp;#x20; print(f\u0026#34;成功删除学号为 {student\\_id} 的学生。\u0026#34;) \u0026amp;#x20; else: \u0026amp;#x20; print(f\u0026#34;学号为 {student\\_id} 的学生不存在，无法删除。\u0026#34;) \u0026amp;#x20; def get\\_student(self, student\\_id): \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; 获取学生对象 \u0026amp;#x20; :param student\\_id: 学生学号 \u0026amp;#x20; :return: 学生对象，如果不存在则返回 None \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; return self.students.get(student\\_id) \u0026amp;#x20; def list\\_students(self): \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; 列出所有学生信息 \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; if self.students: \u0026amp;#x20; for student in self.students.values(): \u0026amp;#x20; print(student) \u0026amp;#x20; else: \u0026amp;#x20; print(\u0026#34;当前没有学生信息。\u0026#34;) \u0026amp;#x20; def add\\_student\\_score(self, student\\_id, course, score): \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; 为学生添加课程成绩 \u0026amp;#x20; :param student\\_id: 学生学号 \u0026amp;#x20; :param course: 课程名称 \u0026amp;#x20; :param score: 课程成绩 \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; student = self.get\\_student(student\\_id) \u0026amp;#x20; if student: \u0026amp;#x20; student.add\\_score(course, score) \u0026amp;#x20; else: \u0026amp;#x20; print(f\u0026#34;学号为 {student\\_id} 的学生不存在，无法添加成绩。\u0026#34;) \u0026amp;#x20; def update\\_student\\_score(self, student\\_id, course, new\\_score): \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; 更新学生课程成绩 \u0026amp;#x20; :param student\\_id: 学生学号 \u0026amp;#x20; :param course: 课程名称 \u0026amp;#x20; :param new\\_score: 新的课程成绩 \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; student = self.get\\_student(student\\_id) \u0026amp;#x20; if student: \u0026amp;#x20; student.update\\_score(course, new\\_score) \u0026amp;#x20; else: \u0026amp;#x20; print(f\u0026#34;学号为 {student\\_id} 的学生不存在，无法更新成绩。\u0026#34;) \u0026amp;#x20; def get\\_student\\_score(self, student\\_id, course): \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; 获取学生课程成绩 \u0026amp;#x20; :param student\\_id: 学生学号 \u0026amp;#x20; :param course: 课程名称 \u0026amp;#x20; :return: 课程成绩，如果学生不存在或未录入该课程成绩则返回 None \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; student = self.get\\_student(student\\_id) \u0026amp;#x20; if student: \u0026amp;#x20; return student.get\\_score(course) \u0026amp;#x20; else: \u0026amp;#x20; print(f\u0026#34;学号为 {student\\_id} 的学生不存在，无法获取成绩。\u0026#34;) \u0026amp;#x20; return None \u0026amp;#x20; def get\\_student\\_all\\_scores(self, student\\_id): \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; 获取学生所有课程成绩 \u0026amp;#x20; :param student\\_id: 学生学号 \u0026amp;#x20; :return: 包含所有课程和成绩的字典，如果学生不存在则返回 None \u0026amp;#x20; \u0026#34;\u0026#34;\u0026#34; \u0026amp;#x20; student = self.get\\_student(student\\_id) \u0026amp;#x20; if student: \u0026amp;#x20; return student.get\\_all\\_scores() \u0026amp;#x20; else: \u0026amp;#x20; print(f\u0026#34;学号为 {student\\_id} 的学生不存在，无法获取所有成绩。\u0026#34;) \u0026amp;#x20; return None 测试成绩管理系统 最后，我们编写一些测试代码来验证这个学生成绩管理系统的功能。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 \\# 创建成绩管理系统实例 system = GradeManagementSystem() \\# 添加学生 system.add\\_student(1, \u0026#34;Alice\u0026#34;) system.add\\_student(2, \u0026#34;Bob\u0026#34;) \\# 添加学生成绩 system.add\\_student\\_score(1, \u0026#34;Math\u0026#34;, 90) system.add\\_student\\_score(1, \u0026#34;English\u0026#34;, 85) system.add\\_student\\_score(2, \u0026#34;Math\u0026#34;, 80) \\# 列出所有学生信息 system.list\\_students() \\# 更新学生成绩 system.update\\_student\\_score(1, \u0026#34;Math\u0026#34;, 95) \\# 获取学生成绩 print(f\u0026#34;Alice 的 Math 成绩: {system.get\\_student\\_score(1, \u0026#39;Math\u0026#39;)}\u0026#34;) \\# 获取学生所有成绩 print(f\u0026#34;Bob 的所有成绩: {system.get\\_student\\_all\\_scores(2)}\u0026#34;) \\# 删除学生 system.remove\\_student(2) system.list\\_students() 通过以上代码，我们实现了一个基本的学生成绩管理系统，涵盖了学生信息和成绩的常见操作。在实际应用中，可以根据需求进一步扩展和优化这个系统，例如添加数据持久化功能、用户界面等。\n","date":"0001-01-01T00:00:00Z","permalink":"https://tu-molo.github.io/p/","title":""}]